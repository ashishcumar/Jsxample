{
    "title": "Array.prototype.some() Polyfill",
    "description": "Implement a polyfill for the Array.prototype.some() method which tests whether at least one element in the array passes the test implemented by the provided function.",
    "category": ["JavaScript", "Polyfill"],
    "requirements": [
      "Should work on all arrays",
      "Should accept a predicate function",
      "Should pass current element, index, and array to predicate",
      "Should return true if any element passes, false otherwise"
    ],
    "code": {
      "basic": "Array.prototype.mySome = function(callback) {\n  for (let i = 0; i < this.length; i++) {\n    if (callback(this[i], i, this)) {\n      return true;\n    }\n  }\n  return false;\n};",
      "with-thisArg": "Array.prototype.mySome = function(callback, thisArg) {\n  for (let i = 0; i < this.length; i++) {\n    if (callback.call(thisArg, this[i], i, this)) {\n      return true;\n    }\n  }\n  return false;\n};",
      "edge-cases": "Array.prototype.mySome = function(callback, thisArg) {\n  if (this == null) throw new TypeError('this is null or not defined');\n  if (typeof callback !== 'function') throw new TypeError(callback + ' is not a function');\n  \n  const array = Object(this);\n  const len = array.length >>> 0;\n  \n  for (let i = 0; i < len; i++) {\n    if (i in array && callback.call(thisArg, array[i], i, array)) {\n      return true;\n    }\n  }\n  \n  return false;\n};"
    },
    "explanation": [
      "The some method tests whether at least one element in the array passes the test implemented by the provided function.",
      "We implement this by iterating through the array and testing each element with the predicate.",
      "If any element makes the predicate return true, we immediately return true (short-circuiting).",
      "If no elements satisfy the predicate after checking all elements, we return false.",
      "Edge cases include handling null this, non-function callbacks, and sparse arrays."
    ],
    "tags": ["array", "polyfill", "test"],
    "difficulty": "medium",
    "type": "implementation"
  }
  