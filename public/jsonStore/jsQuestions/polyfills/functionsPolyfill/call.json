{
    "title": "Function.prototype.call() Polyfill",
    "category": ["JavaScript", "Polyfill", "Function Methods"],
    "description": "Implement a polyfill for Function.prototype.call() which calls a function with a given this value and arguments provided individually.",
    "requirements": [
      "Should set the this context",
      "Should pass arguments individually",
      "Should handle null/undefined context",
      "Should work with any function"
    ],
    "code": {
      "basic": "Function.prototype.myCall = function(context, ...args) {\n  context = context || window;\n  const fnSymbol = Symbol('fn');\n  context[fnSymbol] = this;\n  const result = context[fnSymbol](...args);\n  delete context[fnSymbol];\n  return result;\n};",
      "spec-compliant": "Function.prototype.myCall = function(thisArg) {\n  if (typeof this !== 'function') {\n    throw new TypeError('Function.prototype.call called on incompatible ' + this);\n  }\n  \n  const args = [];\n  for (let i = 1; i < arguments.length; i++) {\n    args.push(arguments[i]);\n  }\n  \n  thisArg = thisArg != null ? Object(thisArg) : window;\n  \n  const fn = Symbol('fn');\n  thisArg[fn] = this;\n  \n  const result = thisArg[fn](...args);\n  delete thisArg[fn];\n  \n  return result;\n};"
    },
    "explanation": [
      "Calls function with specified this context",
      "Passes arguments individually (not as array)",
      "Handles null/undefined context by defaulting to global object",
      "Uses Symbol to avoid property conflicts",
      "Cleans up temporary property after call"
    ],
    "tags": ["function", "polyfill", "context"],
    "difficulty": "medium",
    "type": "javascript"
  }
