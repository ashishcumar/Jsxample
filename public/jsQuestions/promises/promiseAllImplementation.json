{
  "title": "Promise.all() Implementation",
  "category": ["JavaScript", "Asynchronous Programming"],
  "description": "Implement a custom version of Promise.all() that handles both fulfillments and rejections correctly.",
  "requirements": [
    "Return a single Promise that resolves when all input promises resolve",
    "Preserve the order of results regardless of completion order",
    "Immediately reject if any input promise rejects",
    "Handle non-Promise values in the input array",
    "Maintain the same behavior as native Promise.all()"
  ],
  "code": {
    "Custom Implementation": "const customPromiseAll = (promiseArr) => {\n  const results = [];\n  let completedCount = 0;\n\n  return new Promise((resolve, reject) => {\n    if (promiseArr.length === 0) {\n      resolve(results);\n      return;\n    }\n\n    promiseArr.forEach((promise, index) => {\n      Promise.resolve(promise)\n        .then((value) => {\n          results[index] = value;\n          completedCount++;\n          if (completedCount === promiseArr.length) {\n            resolve(results);\n          }\n        })\n        .catch(reject);\n    });\n  });\n};",
    "Native Promise.all()": "const nativeResults = await Promise.all(promiseArray);",
    "Test Case Example": "const getPromise = (n, delay) => {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(n), delay);\n  });\n};\n\nconst testPromiseAll = async () => {\n  const promises = [\n    getPromise(1, 300),\n    getPromise(2, 100),\n    Promise.resolve(3),\n    4\n  ];\n\n  try {\n    const results = await customPromiseAll(promises);\n    console.log(results);\n  } catch (error) {\n    console.error(\"One of the promises rejected:\", error);\n  }\n};"
  },
  "explanation": [
    "### Key Features:\n1. **Order Preservation**: Results appear in the same order as input promises\n2. **Immediate Rejection**: Fails fast if any promise rejects\n3. **Mixed Input Handling**: Works with both Promise and non-Promise values\n4. **Empty Array Handling**: Resolves immediately with empty array for empty input",
    "### Comparison with Native Promise.all():\n- Identical behavior for successful cases\n- Same error handling characteristics\n- Slightly less optimized than native implementation\n- Demonstrates core Promise aggregation logic",
    "### Performance Considerations:\n- O(n) time complexity where n is number of promises\n- O(n) space complexity for results storage\n- No additional overhead beyond native implementation"
  ],
  "tags": ["promises", "async/await", "error handling", "ES6"],
  "difficulty": "Medium",
  "benchmarks": {
    "Custom Implementation": "Educational purpose - understand Promise internals",
    "Native Promise.all()": "Optimized engine implementation - use in production"
  },
  "type": "javascript"
}
