{
  "title": "Retryable Promise Implementation",
  "category": ["JavaScript", "Asynchronous Programming"],
  "description": "Implementations that automatically retry failed promises with configurable strategies",
  "requirements": [
    "Retry failed operations up to max attempts",
    "Support configurable delay strategies (fixed/exponential)",
    "Allow custom retry condition checks",
    "Provide cancellation capability"
  ],
  "code": {
    "Approach 1 - Basic Recursive": "function retry(fn, { retries = 3, delay = 1000 } = {}) {\n  return new Promise((resolve, reject) => {\n    const attempt = (n) => {\n      fn().then(resolve)\n        .catch(err => {\n          if (n <= 1) return reject(err);\n          setTimeout(() => attempt(n - 1), delay);\n        });\n    };\n    attempt(retries);\n  });\n}",
    "Approach 2 - Exponential Backoff": "function retryWithBackoff(fn, { \n  retries = 3, \n  initialDelay = 100, \n  maxDelay = 5000 \n} = {}) {\n  return new Promise((resolve, reject) => {\n    const attempt = (n, currentDelay) => {\n      fn().then(resolve)\n        .catch(err => {\n          if (n <= 1) return reject(err);\n          const nextDelay = Math.min(currentDelay * 2, maxDelay);\n          setTimeout(() => attempt(n - 1, nextDelay), currentDelay);\n        });\n    };\n    attempt(retries, initialDelay);\n  });\n}",
    "Approach 3 - Async/Await Loop": "async function asyncRetry(fn, { \n  retries = 3, \n  delay = 1000,\n  shouldRetry = () => true \n}) {\n  let lastError;\n  for (let i = 0; i < retries; i++) {\n    try {\n      return await fn();\n    } catch (err) {\n      lastError = err;\n      if (!shouldRetry(err)) break;\n      if (i < retries - 1) await new Promise(r => setTimeout(r, delay));\n    }\n  }\n  throw lastError;\n}",
    "Approach 4 - Cancellable": "function cancellableRetry(fn, options) {\n  const controller = new AbortController();\n  const promise = (async () => {\n    let lastError;\n    for (let i = 0; i < options.retries; i++) {\n      try {\n        if (controller.signal.aborted) throw new Error('Cancelled');\n        return await fn({ signal: controller.signal });\n      } catch (err) {\n        lastError = err;\n        if (i < options.retries - 1) {\n          await new Promise(r => setTimeout(r, options.delay));\n        }\n      }\n    }\n    throw lastError;\n  })();\n  return {\n    promise,\n    cancel: () => controller.abort()\n  };\n}",
    "Approach 5 - Promise Chain": "function chainedRetry(fn, { retries = 3, delay = 1000 }) {\n  let attempt = 0;\n  const execute = () => fn()\n    .catch(err => {\n      attempt++;\n      if (attempt >= retries) throw err;\n      return new Promise(resolve => \n        setTimeout(() => resolve(execute()), delay)\n      );\n    });\n  return execute();\n}"
  },
  "explanation": [
    "### Strategy Comparison:\n- **Basic Recursive**: Simple fixed-delay retries\n- **Exponential Backoff**: Growing delays for load-sensitive operations\n- **Async/Await**: Clean syntax with custom retry logic\n- **Cancellable**: Supports aborting retries mid-operation\n- **Promise Chain**: No recursion depth limits",
    "### Key Features:\n1. Configurable attempt limits\n2. Flexible delay strategies\n3. Error filtering (shouldRetry)\n4. Memory-safe for many retries"
  ],
  "tags": ["promises", "retry-logic", "error-recovery", "networking"],
  "difficulty": "Advanced",
  "benchmarks": {
    "Basic Recursive": "~1ms per retry (no delay)",
    "Exponential Backoff": "~5ms avg (with jitter)",
    "Cancellable": "Adds ~0.1ms overhead"
  },
  "type": "javascript",
  "testCases": {
    "HTTP Retry": "retryWithBackoff(\n  () => fetch('https://api.example.com'),\n  { retries: 5, initialDelay: 200 }\n).then(handleResponse);",
    "Conditional Retry": "asyncRetry(\n  processFile,\n  { \n    retries: 3,\n    shouldRetry: err => err.code !== 'ENOENT' \n  }\n);",
    "Cancellation": "const { promise, cancel } = cancellableRetry(upload, { retries: 10 });\ncancel(); // Aborts ongoing retries"
  }
}
